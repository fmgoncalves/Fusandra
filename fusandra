#!/usr/bin/python
# -*- coding : utf8 -*-

import os
import stat
import errno
import time
import uuid
import math
import inspect
import cStringIO
from threading import Thread

import pynotify
import pycassa
import fuse

KEYSPACE = 'Fusandra'
METADATA_CF = 'Metadata'
LOG_CF = 'Log'
FILES_CF = 'Files'
DIRECTORIES_CF = 'Directories'

FUSANDRA_UUID = uuid.UUID('3c88aa90-f1f6-4c53-9ae2-16be6251bbbd')

CHUNK_SIZE = 2 * 1024 # 2 kb

#TODO
#	Heavy refactoring. Whole thing has been done in hackish manner...
#	Finish method implementation
#	Extensive error handling and reporting
#	Proper logging (instead of relying on libnotify)
#	Documentation
#	Pre-Fectching/Caching/Optimizations

#	FUSE Python Reference
#	http://sourceforge.net/apps/mediawiki/fuse/index.php?title=FUSE_Python_Reference

class Fusandra(fuse.Fuse):
	
	def __init__(self, server_name = 'localhost', server_port = 9160, *args, **kw):
		fuse.fuse_python_api = (0, 2)
		self.server = {'name' : server_name, 'port': server_port }
		
		if self.prepare_cassandra_keyspace():
			fuse.Fuse.__init__(self, *args, **kw)
		else: raise Exception('Failed to setup Fusandra')
		
		self.metadata_cache = {}
	
	def notify(self, title, message=''):
		try:
			self.notification
		except:
			pynotify.init(KEYSPACE)
			self.notification = pynotify.Notification('FUSANDRA','')
			self.msg_log = []
		t = time.time()
		self.msg_log.append( ( t, '%s - %s' % (title,message ) ) )
		self.msg_log = filter(lambda x: x[0] > t-5 , self.msg_log)
		self.notification.update('FUSANDRA', '\n'.join(set( x[1] for x in sorted(self.msg_log, key = lambda x: x[0]))))
		self.notification.show()
	
	### CASSANDRA UTILITY METHODS
	
	def prepare_cassandra_keyspace(self):
		'''
			Verifies if the Cassandra instance is configured for Fusandra.
			If not, configure automatically.
		'''
		sys = pycassa.SystemManager('%s:%d'% (self.server['name'], self.server['port']))
		
		if KEYSPACE not in sys.list_keyspaces():
			#create required keyspace
			self.notify('Preparing Cassandra', 'Creating Keyspace %s' % KEYSPACE)
			sys.create_keyspace(KEYSPACE, replication_factor=1)
			
			#create column families: metadata/inode, log, directories, files
#			self.notify('Preparing Cassandra', 'Creating Column Family %s' % METADATA_CF)
			sys.create_column_family(KEYSPACE, METADATA_CF, comparator_type=pycassa.system_manager.UTF8_TYPE, comment='Metadata storage')
#			self.notify('Preparing Cassandra', 'Creating Column Family %s' % LOG_CF)
			sys.create_column_family(KEYSPACE, LOG_CF, comparator_type=pycassa.system_manager.UTF8_TYPE, default_validation_class=pycassa.system_manager.UTF8_TYPE, comment='Event logs')
#			self.notify('Preparing Cassandra', 'Creating Column Family %s' % FILES_CF)
			sys.create_column_family(KEYSPACE, FILES_CF, comparator_type=pycassa.system_manager.INT_TYPE, default_validation_class=pycassa.system_manager.BYTES_TYPE, comment='Files storage (each divided in chunks)')
#			self.notify('Preparing Cassandra', 'Creating Column Family %s' % DIRECTORIES_CF)
			sys.create_column_family(KEYSPACE, DIRECTORIES_CF, comparator_type=pycassa.system_manager.UTF8_TYPE, default_validation_class=pycassa.system_manager.UTF8_TYPE, comment='Directories containing each file/directory in itself as a column')
		
		sys.close()
		
		self.pool = pycassa.connect(KEYSPACE, [ '%s:%d' % (self.server['name'], self.server['port']) ])
		
		return True

	def write_stat(self, path, cst):
#		self.notify('WRITE STAT', '%s -> %s' % (path, cst) )
		metadata = pycassa.ColumnFamily(self.pool, METADATA_CF)
		try:
			cols = {
				'st_mode': cst.st_mode,
				'st_ino': cst.st_ino,
				'st_dev': cst.st_dev,
				'st_nlink': cst.st_nlink,
				'st_uid': cst.st_uid,
				'st_gid': cst.st_gid,
				'st_size': cst.st_size,
				'st_atime': cst.st_atime,
				'st_mtime': cst.st_mtime,
				'st_ctime': cst.st_ctime,	
			}
			metadata.insert( path, dict([ (key, str(cols[key])) for key in cols]) )
			self.metadata_cache[path] = FusandraStat(**cols)
		except Exception as e:
			self.notify('STAT %s' % inspect.stack()[0][3], e.message)
	
	def update_cache(self, path):
		try:
			columns = pycassa.ColumnFamily(self.pool, METADATA_CF).get(path)
			self.notify('Cache HIT', path)
			st = FusandraStat(**columns)
			st.st_atime = int(time.time())
			self.write_stat(path, st)
		except Exception as e:
			self.notify('Cache MISS %s' % path, e)
			if path == '/':
				st = FusandraStat.default_dir_stat()
				self.write_stat(path, st)
			st = - errno.ENOENT
		self.metadata_cache[path] = st
	
	### FUSE METHODS
	
	#General Filesystem Methods
	def getattr(self, path):
		#TODO go to metadata and fetch
		"""
		- st_mode (protection bits)
		- st_ino (inode number)
		- st_dev (device)
		- st_nlink (number of hard links)
		- st_uid (user ID of owner)
		- st_gid (group ID of owner)
		- st_size (size of file, in bytes)
		- st_atime (time of most recent access)
		- st_mtime (time of most recent content modification)
		- st_ctime (platform dependent; time of most recent metadata change on Unix,
					or the time of creation on Windows)
		"""
		self.notify('%s' % inspect.stack()[0][3], path)
		
		if path not in self.metadata_cache:
			self.update_cache(path)
		st = self.metadata_cache[path]

		return st
	
	def fsinit(self):
		if pynotify.init(KEYSPACE):
			self.notify("Started %s"%KEYSPACE)
	
	def mknod(self, path, mode, rdev):
		self.notify('%s' % inspect.stack()[0][3], '%s %s %s'% (path,mode,rdev))
		#TODO

	
	def mkdir(self, path, mode):
		self.notify('%s' % inspect.stack()[0][3], '%s - %s'%(path,mode))
		
		directories = pycassa.ColumnFamily(self.pool, DIRECTORIES_CF)
		
		pt_idx = path.rindex('/')
		parent = pt_idx and path[:pt_idx] or '/'
		
		self.notify('parent', parent)
		
		directories.insert(parent,{ path: 'directory' })
		
		self.write_stat(path, FusandraStat.default_dir_stat())
	
	def rmdir(self, path):
		self.notify('%s' % inspect.stack()[0][3], path)
		
		dirs = pycassa.ColumnFamily(self.pool, DIRECTORIES_CF)
		
		if dirs.get_count(path) > 0:
			return - errno.ENOTEMPTY
		
		pt_idx = path.rindex('/')
		self.notify('PT_IDX', str(pt_idx))
		parent = pt_idx and path[:pt_idx] or '/'
		
		pycassa.ColumnFamily(self.pool, METADATA_CF).remove(path)
		del self.metadata_cache[path]
		dirs.remove(path)
		dirs.remove(parent, columns=[path])
		
	def unlink(self, path):
		self.notify('%s' % inspect.stack()[0][3], path)
		
		pt_idx = path.rindex('/')
		self.notify('PT_IDX', str(pt_idx))
		parent = pt_idx and path[:pt_idx] or '/'
		
		pycassa.ColumnFamily(self.pool, METADATA_CF).remove(path)
		del self.metadata_cache[path]
		pycassa.ColumnFamily(self.pool, FILES_CF).remove(path)		
		pycassa.ColumnFamily(self.pool, DIRECTORIES_CF).remove(parent, columns=[path])

		
	
#	def rename(self, old, new):
#		self.notify('%s' % inspect.stack()[0][3], '%s -> %s' % (old, new))
#		#TODO this method has too many possible consistency problems, should probably remain unimplemented
	
	#File Operation Methods

	def open(self, path, flags):
		self.notify('%s' % inspect.stack()[0][3], path)
		try:
			pycassa.ColumnFamily(self.pool, FILES_CF).get(path, column_count = 1)
			return 0
		except:
			return - errno.ENOENT
	
	def create(self, path, flags, mode):
		self.notify('%s' % inspect.stack()[0][3], '%s %s %s'%(path, flags, mode))
		
		directories = pycassa.ColumnFamily(self.pool, DIRECTORIES_CF)
		
		pt_idx = path.rindex('/')
		self.notify('PT_IDX', str(pt_idx))
		parent = pt_idx and path[:pt_idx] or '/'
		
		self.notify('parent', parent)
		
		directories.insert(parent,{ path: 'file' })
		
		st = FusandraStat.default_file_stat()
		st.st_size = 0
		st.st_mode = stat.S_IFREG | mode;
		
		pycassa.ColumnFamily(self.pool, FILES_CF).insert(path, {0:''})
		
		self.write_stat(path, st)
	
	def read(self, path, length, offset, fh=None):
		#Must return a str value. Otherwise you get an 'Invalid argument' error.
		self.notify('%s' % inspect.stack()[0][3], '%s %s %s' % (path,length, offset))
		
		try:
			start_chunk = offset / CHUNK_SIZE
			end_chunk = int(math.ceil((length+offset)/float(CHUNK_SIZE)))
		
			self.notify('Calculated chunks to retrieve ', '%d %s'%(start_chunk,end_chunk) )
			files = pycassa.ColumnFamily(self.pool, FILES_CF)
		
			cols = files.get(path, column_start=start_chunk,column_finish=(end_chunk+1))
			
			res = reduce(lambda x,y: x + cols[y] , sorted(cols.keys()), ''  )
			
			res_offset = offset-(start_chunk*CHUNK_SIZE)
			print res
			return str( res[ res_offset : res_offset+length ] )
		except Exception as e:
			self.notify('EXCEPTION READING '+path, str(e)+e.message)
			return ''
		
		
	def write(self, path, buf, offset, fh=None):
		self.notify('%s' % inspect.stack()[0][3], '%s %s %s'%(path, offset, len(buf)))

		if fh:
			self.notify('ALERT', 'THERE\'s a FILE HANDLER')
		
		t0=time.time()
		files = pycassa.ColumnFamily(self.pool, FILES_CF)

		result = ''
				
		start_chunk = offset / CHUNK_SIZE
		
		res_offset = offset-(start_chunk*CHUNK_SIZE)
		
		if res_offset:
			result += files.get(path, columns=[start_chunk])[:res_offset]
		
		result += buf
		
		end_chunk = int(math.ceil((len(buf)+offset)/float(CHUNK_SIZE)))
		
		res_padding = (offset+len(buf)) % CHUNK_SIZE
		
		if res_padding:
			try:
				result += files.get(path, columns=[end_chunk])[-res_padding:]
			except:
				pass
		
		obj = cStringIO.StringIO(result)
		col = obj.read(CHUNK_SIZE)
		i=0
		to_add = {}
		while col:
			to_add[start_chunk + i] = col
			i+=1
			col = obj.read(CHUNK_SIZE)
		try:
			files.insert(path, to_add)
		except Exception as e:
			self.notify('EXCEPTION WRITING '+path, str(e)+e.message)

		n_cols = files.get_count(path)
		
		pycassa.ColumnFamily(self.pool, METADATA_CF).insert(path, {'st_size' : str(n_cols * CHUNK_SIZE)})
		
		self.notify('WRITE DONE', '%d in %.2f s' % (n_cols, time.time()-t0) )
		
		return len(buf)
			
	def utime ( self, path, times ):
		self.notify('%s' % inspect.stack()[0][3], '%s %s'% (path,times))
		try:
			pycassa.ColumnFamily(self.pool, METADATA_CF).insert(path, { 'st_atime': str(times[0]), 'st_mtime': str(times[1]) } )
			if path in self.metadata_cache:
				self.metadata_cache[path].st_atime = str(times[0])
				self.metadata_cache[path].st_mtime = str(times[1])
			
		except Exception as e:
			self.notify('EXCEPTION UTIMING '+path, str(e)+e.message)			
		
	#Directory methods
	
	def readdir(self, path, offset):
		self.notify('%s' % inspect.stack()[0][3], '%s %s' % (path,offset))
		
		dirs = pycassa.ColumnFamily(self.pool, DIRECTORIES_CF)
		try:
			elems = dirs.get(path).keys()
		except:
			elems = []
	
		for name in ['.', '..']:
			yield fuse.Direntry(name)
		for name in elems:
			try:
				yield fuse.Direntry(str(name[name.rindex('/')+1:]))
			except Exception as e:
				self.notify('DAMN '+name,e.message)

#TODO other methods to look into (implement where relevant)

#	def chmod ( self, path, mode ):
#		print '*** chmod', path, oct(mode)
#		return -errno.ENOSYS

#	def chown ( self, path, uid, gid ):
#		print '*** chown', path, uid, gid
#		return -errno.ENOSYS

#	def fsync ( self, path, isFsyncFile ):
#		print '*** fsync', path, isFsyncFile
#		return -errno.ENOSYS

#	def link ( self, targetPath, linkPath ):
#		print '*** link', targetPath, linkPath
#		return -errno.ENOSYS

#	def mknod ( self, path, mode, dev ):
#		print '*** mknod', path, oct(mode), dev
#		return -errno.ENOSYS

#	def open ( self, path, flags ):
#		print '*** open', path, flags
#		return -errno.ENOSYS

#	def read ( self, path, length, offset ):
#		print '*** read', path, length, offset
#		return -errno.ENOSYS

#	def readlink ( self, path ):
#		print '*** readlink', path
#		return -errno.ENOSYS

#	def release ( self, path, flags ):
#		print '*** release', path, flags
#		return -errno.ENOSYS

#	def rename ( self, oldPath, newPath ):
#		print '*** rename', oldPath, newPath
#		return -errno.ENOSYS

#	def rmdir ( self, path ):
#		print '*** rmdir', path
#		return -errno.ENOSYS

#	def statfs ( self ):
#		print '*** statfs'
#		return -errno.ENOSYS

#	def symlink ( self, targetPath, linkPath ):
#		print '*** symlink', targetPath, linkPath
#		return -errno.ENOSYS

#	def truncate ( self, path, size ):
#		print '*** truncate', path, size
#		return -errno.ENOSYS


class FusandraStat(fuse.Stat):

	@staticmethod
	def default_dir_stat():
		t = int(time.time())
		return FusandraStat(st_mode = stat.S_IFDIR | 0755, st_ino = 0, st_dev = 0, st_nlink = 2, st_uid = 0, st_gid = 0, st_size = 4096, st_atime = t, st_mtime = t, st_ctime = t)
	
	@staticmethod
	def default_file_stat():
		t = int(time.time())
		return FusandraStat(st_mode = stat.S_IFREG | 0666, st_ino = 0, st_dev = 0, st_nlink = 2, st_uid = 0, st_gid = 0, st_size = CHUNK_SIZE, st_atime = t, st_mtime = t, st_ctime = t)
	
	def __init__(self, st_mode, st_ino, st_dev, st_nlink, st_uid, st_gid, st_size, st_atime, st_mtime, st_ctime, **kwargs):
		self.st_mode = int(st_mode)
		self.st_ino = int(st_ino)
		self.st_dev = int(st_dev)
		self.st_nlink = int(st_nlink)
		self.st_uid = int(st_uid)
		self.st_gid = int(st_gid)
		self.st_size = int(st_size)
		self.st_atime = int(st_atime)
		self.st_mtime = int(st_mtime)
		self.st_ctime = int(st_ctime)
	
	def __str__(self):
		return str([self.st_mode, self.st_ino, self.st_dev, self.st_nlink, self.st_uid, self.st_gid, self.st_size, self.st_atime, self.st_mtime, self.st_ctime,])

if __name__ == '__main__':
	cf = Fusandra(version="%prog " + fuse.__version__)
	cf.parse(errex=1)
	cf.main()
