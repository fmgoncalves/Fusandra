#!/usr/bin/python
# -*- coding : utf8 -*-

import os
import stat
import errno
import time
import inspect
import sys

import fuse

import pycassa

KEYSPACE='fusandra'

#import sys
#sys.setrecursionlimit(10)

class Fusandra(fuse.Fuse):
	
	def __init__(self, *args, **kw):
		print 'Initing'
		fuse.fuse_python_api = (0, 2)
		print 'Initing Cassandra'
		
		self.open_files = dict()
		self.metadata, self.files, self.dirs = self.cassandra_client()
		print 'Initing Fuse'

		os.makedirs(sys.argv[-1])
		fuse.Fuse.__init__(self, *args, **kw)
		print 'Inited'
	
	def cassandra_client(self):
		self.setup_cassandra()
		pool = pycassa.pool.ConnectionPool(KEYSPACE)
		return ( pycassa.columnfamily.ColumnFamily(pool, 'metadata', read_consistency_level=pycassa.ConsistencyLevel.QUORUM,write_consistency_level=pycassa.ConsistencyLevel.QUORUM),
					pycassa.columnfamily.ColumnFamily(pool, 'files', read_consistency_level=pycassa.ConsistencyLevel.QUORUM,write_consistency_level=pycassa.ConsistencyLevel.QUORUM),
					pycassa.columnfamily.ColumnFamily(pool, 'dirs', read_consistency_level=pycassa.ConsistencyLevel.QUORUM,write_consistency_level=pycassa.ConsistencyLevel.QUORUM))

	def setup_cassandra(self):
		sys = pycassa.system_manager.SystemManager()#'localhost:9160')
		if KEYSPACE not in sys.list_keyspaces():
			sys.create_keyspace(KEYSPACE, pycassa.system_manager.SIMPLE_STRATEGY, {'replication_factor': '1'})
			sys.create_column_family(KEYSPACE, 'metadata', key_validation_class=pycassa.system_manager.UTF8_TYPE, comparator_type=pycassa.system_manager.UTF8_TYPE, default_validation_class=pycassa.system_manager.INT_TYPE)
			sys.create_column_family(KEYSPACE, 'files', key_validation_class=pycassa.system_manager.UTF8_TYPE, comparator_type=pycassa.system_manager.UTF8_TYPE, default_validation_class=pycassa.system_manager.BYTES_TYPE)
			sys.create_column_family(KEYSPACE, 'dirs', key_validation_class=pycassa.system_manager.UTF8_TYPE, comparator_type=pycassa.system_manager.UTF8_TYPE, default_validation_class=pycassa.system_manager.INT_TYPE)
		sys.close()

	@staticmethod
	def default_dir_stat():
		st = fuse.Stat()
		st.st_mode = stat.S_IFDIR
		st.st_nlink = 2
		st.st_size = 0
		st.st_atime = int(time.time())
		st.st_mtime = st.st_atime
		st.st_ctime = st.st_atime
		return st

	@staticmethod
	def default_file_stat():
		st = fuse.Stat()
		st.st_mode = stat.S_IFREG 
		st.st_nlink = 2
		st.st_atime = int(time.time())
		st.st_mtime = st.st_atime
		st.st_ctime = st.st_atime
		st.st_size = 0
		return st

	@staticmethod
	def stat_of_dict(d):
		st = fuse.Stat()
		st.st_mode = d['st_mode']
		st.st_nlink = d['st_nlink']
		st.st_size = d['st_size']
		st.st_atime = d['st_atime']
		st.st_mtime = d['st_mtime']
		st.st_ctime = d['st_ctime']
		return st

	@staticmethod
	def dict_of_stat(st):
		d = {
			'st_mode': st.st_mode,
			'st_nlink': st.st_nlink,
			'st_atime': st.st_atime,
			'st_mtime': st.st_mtime,
			'st_ctime': st.st_ctime,
			'st_size': st.st_size
		}
		return d

	def load_file(self,path):
		print 'load file {}'.format(path)
		f = dict(self.files.get(path))
		f['attr'] = Fusandra.stat_of_dict(self.metadata.get(path))
		f['content'] = bytearray(f['content'])#,"utf-8")
		fh = '{}/{}'.format(path,int(time.time()))
		self.open_files[fh] = (path, f)
		return fh

	def sync_file(self,fh):
		print 'sync file {}'.format(fh)
		path,f = self.open_files[fh]
		#print "syncing {} from {}".format(path,f)
		self.files.insert(path, {'content': str(f['content'])})
		self.metadata.insert(path, {'st_size': f['attr'].st_size })

	### FUSE METHODS
	
	#General Filesystem Methods
	def getattr(self, path):
		"""
		- st_mode (protection bits)
		- st_ino (inode number)
		- st_dev (device)
		- st_nlink (number of hard links)
		- st_uid (user ID of owner)
		- st_gid (group ID of owner)
		- st_size (size of file, in bytes)
		- st_atime (time of most recent access)
		- st_mtime (time of most recent content modification)
		- st_ctime (platform dependent; time of most recent metadata change on Unix,
					or the time of creation on Windows)
		"""
		print '{} {}'.format(inspect.stack()[0][3], path)
		try:
			st = dict(self.metadata.get(path))
			#print '{}'.format(st)
			return Fusandra.stat_of_dict(st)
		except pycassa.NotFoundException:
			#print "{} doesn't exist".format(path)
			return - errno.ENOENT
	
	def fsinit(self):
		print "fsinit"
		try:
			self.metadata.get('/')
		except pycassa.NotFoundException:
			print 'go mkdir /'
			self.mkdir('/', 0o755)
	
#	def mknod(self, path, mode, rdev):
#		print '{} {}'.format(inspect.stack()[0][3], '%s %s %s'% (path,mode,rdev))
#		return - errno.ENOENT
	
	def mkdir(self, path, mode):
		print '{} {} {}'.format(inspect.stack()[0][3], path,mode)
		st = Fusandra.default_dir_stat()
		st.st_mode = st.st_mode | mode
		self.metadata.insert(path, Fusandra.dict_of_stat(st))
		self.dirs.insert(path, {'.':1,'..':1})
		while path != '/':
			s = os.path.dirname(path)
			#print 'Adding {} to {}'.format(path,s)
			self.dirs.insert(s,{path:1})
			path = s

	def rmdir(self, path):
		print '{} {}'.format(inspect.stack()[0][3], path)
		self.metadata.remove(path)
		self.dirs.remove(path)
		self.dirs.remove(os.path.dirname(path),columns=[path])

	def unlink(self, path):
		print '{} {}'.format(inspect.stack()[0][3], path)
		self.metadata.remove(path)
		#print 'unlinked	metadata {}'.format(path)
		self.files.remove(path)
		#print 'unlinked	file {}'.format(path)
		self.dirs.remove(os.path.dirname(path),columns=[os.path.basename(path)])
		#print 'unlinked	parent dir {} {}'.format(os.path.dirname(path),path)

	#File Operation Methods

	def open(self, path, flags):
		print '{} {}'.format(inspect.stack()[0][3], path)
		return self.load_file(path)
	
	def create(self, path, flags, mode):
		print '{} {}'.format(inspect.stack()[0][3], '%s %s %s'%(path, flags, mode))
		if (flags & os.O_CREAT) == os.O_CREAT:
			st = Fusandra.default_file_stat()
			st.st_mode = st.st_mode | mode
			self.metadata.insert(path, Fusandra.dict_of_stat(st))
			self.dirs.insert(os.path.dirname(path),{os.path.basename(path):1})
			self.files.insert(path, { 'content': '' })
			return self.load_file(path)
		else:
			return - errno.EEXIST

	def truncate ( self, path, size ):
		print '{} {}'.format(inspect.stack()[0][3], '%s %s'%(path, size))

		self.files.insert(path, { 'content' : '' })
		self.metadata.insert(path,{'st_size': 0})
	
	def read(self, path, length, offset, fh=None):
		#Must return a str value. Otherwise you get an 'Invalid argument' error.
		print '{} {}'.format(inspect.stack()[0][3], '%s %s %s %s' % (path,length, offset, fh))
		
		if fh in self.open_files:
			s = self.open_files[fh][1]['content']
			s = s[offset:offset+length]
			#print 'Str at read {}'.format(str(s))
			return str(s)
		else:
			return - errno.ENOENT
		
	def write(self, path, buf, offset, fh=None):
		print '{} {}'.format(inspect.stack()[0][3], '%s %s %s'%(path, offset, len(buf)))

		if fh in self.open_files:
			f = self.open_files[fh][1]
			f['content'][offset:offset+len(buf)] = buf
			f['attr'].st_size = len(f['content'])
			#print self.open_files[fh][1]['content']
			return len(buf)
		else:
			return - errno.ENOENT

	def flush(self, path, fh=None):
		print '{} {}'.format(inspect.stack()[0][3], '{} {}'.format(path, fh))
		self.sync_file(fh)

	def utime ( self, path, times ):
		print '{} {}'.format(inspect.stack()[0][3], '{} {}'.format(path,times))
		self.metadata.insert(path, { 'st_atime': times[0], 'st_mtime': times[1] })
		
	#Directory methods
	
	def readdir(self, path, offset):
		print '{} {}'.format(inspect.stack()[0][3], '%s %s' % (path,offset))
		dirz = list(self.dirs.get(path).keys())
		#print 'yielding these {}'.format(dirz)
		for name in dirz:
			#print 'yielding {}'.format(name)
			de = fuse.Direntry(os.path.basename(str(name)))
			#print 'de {}'.format(de)
			yield de

#TODO other methods to look into (implement where relevant)

	def chmod ( self, path, mode ):
		print '{} {}'.format(inspect.stack()[0][3], '{} {}'.format(path,oct(mode)))
		self.metadata.insert(path, { 'st_mode': mode })

#	def chown ( self, path, uid, gid ):
#		print '*** chown', path, uid, gid
#		return -errno.ENOSYS

#	def fsync ( self, path, isFsyncFile ):
#		print '*** fsync', path, isFsyncFile
#		return -errno.ENOSYS

#	def link ( self, targetPath, linkPath ):
#		print '*** link', targetPath, linkPath
#		return -errno.ENOSYS

#	def mknod ( self, path, mode, dev ):
#		print '*** mknod', path, oct(mode), dev
#		return -errno.ENOSYS

#	def open ( self, path, flags ):
#		print '*** open', path, flags
#		return -errno.ENOSYS

#	def read ( self, path, length, offset ):
#		print '*** read', path, length, offset
#		return -errno.ENOSYS

#	def readlink ( self, path ):
#		print '*** readlink', path
#		return -errno.ENOSYS

#	def release ( self, path, flags ):
#		print '*** release', path, flags
#		return -errno.ENOSYS

#	def rename ( self, oldPath, newPath ):
#		print '*** rename', oldPath, newPath
#		return -errno.ENOSYS

#	def rmdir ( self, path ):
#		print '*** rmdir', path
#		return -errno.ENOSYS

#	def statfs ( self ):
#		print '*** statfs'
#		return -errno.ENOSYS

#	def symlink ( self, targetPath, linkPath ):
#		print '*** symlink', targetPath, linkPath
#		return -errno.ENOSYS

if __name__ == '__main__':
	cf = Fusandra()
	cf.parse(errex=1)
	cf.main()
	print 'Done'
